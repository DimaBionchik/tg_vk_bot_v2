import telebot
from google.oauth2.gdch_credentials import ServiceAccountCredentials

import config
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import sqlite3 as sl
import my_data_base
import gspread
from google.oauth2 import service_account
import time
states = {}

gl_resp = ""
bot = telebot.TeleBot(config.TOKEN)

gs = gspread.service_account(filename=config.JSON_FILE)
ADMIN_ID = ['718611792', '626220085']
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = service_account.Credentials.from_service_account_file("my-test-project-408312-296aa9c49a83.json", scopes=scope)
client = gspread.authorize(creds)
spreadsheet_url = "https://docs.google.com/spreadsheets/d/1qvu3Wn0RXy3WyyetWimApzzTARtfQwNaajcnowmTdyw/edit#gid=0"
sheet = client.open_by_url(spreadsheet_url).sheet1
sh_connection = gs.open_by_url(config.GOOGLE)
worksheet = sh_connection.sheet1
list_of_list = worksheet.get_all_values()

category = {}
info_dishes = {}
info_new_dishes = []

shop_bag = {}
admin_chat_id = -4102272659
dishes_id = {}

for i in list_of_list[1:]:
    category.setdefault(i[3], []).append(i[0])

for name in list_of_list[1:]:
    info_dishes[name[0]] = ['', name[1], name[2]]

markupANS = InlineKeyboardMarkup().row(InlineKeyboardButton("–î–∞", callback_data="yes"),InlineKeyboardButton("–ù–µ—Ç", callback_data="no"))

markupI = InlineKeyboardMarkup()
buttons = [InlineKeyboardButton(name, callback_data=name) for name in category.keys()]
[markupI.row(*buttons[i:i + 2]) for i in range(0, len(buttons), 2)]
if len(buttons) % 2 != 0: markupI.row(buttons[-1])

markup = InlineKeyboardMarkup()
markup.add(InlineKeyboardButton('–í –º–µ–Ω—é', callback_data='3'))


@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
    user_id = call.from_user.id

    if user_id not in states:
        states.setdefault(user_id, {'state': None, 'shop_basket': {}})

    states_shop_basket = states[user_id]['shop_basket']

    if call.data in category:
        message_id = call.message.message_id
        show_dishes_menu(call.data, call.from_user.id, message_id)

    elif call.data[0] == 'f':
        markupL = InlineKeyboardMarkup()
        buttons = [InlineKeyboardButton(item, callback_data='2' + item) for item in category[call.data[1:]]]

        [markupL.row(buttons[i], buttons[i + 1]) for i in range(0, len(buttons) - 1, 2)]

        if len(buttons) % 2 != 0: markupL.row(buttons[-1])
        markupL.add(InlineKeyboardButton('–í –º–µ–Ω—é', callback_data='3'))
        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ.', reply_markup=markupL)

    elif call.data[0] == '3':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥–∞ ‚¨áÔ∏è", reply_markup=markupI)

    elif call.data[0] == '2':
        show_dish_info(call.data[1:], call.message.chat.id)

    elif call.data[0] == '0':
        user_id = call.from_user.id

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ 'shop_basket' –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        if 'shop_basket' not in states[user_id] or states[user_id]['shop_basket'] is None:
            states[user_id]['shop_basket'] = {}

        states[user_id]['shop_basket'][call.data[1:]] = states[user_id]['shop_basket'].get(call.data[1:],
                                                                                           info_dishes[call.data[1:]][
                                                                                           1:] + [0])
        states[user_id]['shop_basket'][call.data[1:]][-1] += 1
        states[user_id]['state'] = "–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
        print(states)
        markupO = InlineKeyboardMarkup().row(
            InlineKeyboardButton('–í –º–µ–Ω—é', callback_data='3'),
            InlineKeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã', callback_data='shop_bag'))
        bot.send_message(call.message.chat.id, '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.', reply_markup=markupO)

    elif call.data == 'start':
        bot.send_message(-4102272659,
                         "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n1. –ö–∞—Ç–µ–≥–æ—Ä–∏—è\n2. –ù–∞–∑–≤–∞–Ω–∏—è\n3. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\n4. –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è\n5. –¶–µ–Ω–∞ (–≤ BYN)",
                         parse_mode='Markdown')
        bot.register_next_step_handler(call.message, enter_dish_adm)


    elif call.data == 'shop_bag':
        states_shop_basket = states[user_id]['shop_basket']

        if states_shop_basket:
            response = '\n'.join(
                [f'{item} [x{details[2]}] = {int(details[1]) * int(details[2])} BYN.' for item, details in
                 states_shop_basket.items()])
            cur = max(int(info_dishes[i][1]) for i in states_shop_basket) if states_shop_basket else 0
            response += f'\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {cur + 10} –º–∏–Ω—É—Ç.'
            user_id = call.from_user.id
            states[user_id]['state'] = "—é–∑–µ—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ"
            states[user_id]['shop_basket'] = states_shop_basket
            print(states)

            markupG = InlineKeyboardMarkup().row(
                InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data='change'),
                InlineKeyboardButton('–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data='clear')).row(
                InlineKeyboardButton('–í –º–µ–Ω—é', callback_data='3'),
                InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='order'))

            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=f'–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ üõí:\n\n{response}', reply_markup=markupG)
        else:
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text='–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ üõí.', reply_markup=markup)


    elif call.data == 'clear':
        states_shop_basket = states[user_id]['shop_basket']
        states_shop_basket.clear()
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ üõí',
                              reply_markup=markup, parse_mode='MarkdownV2')
        user_id = call.from_user.id
        states[user_id]['state'] = "–æ—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã"
        states[user_id]['shop_basket'] = None
        print(states)

    elif call.data == 'change':
        markupG = InlineKeyboardMarkup()
        buttons = [InlineKeyboardButton(dish, callback_data='*' + dish) for dish in states_shop_basket]

        [markupG.row(buttons[i], buttons[i + 1]) for i in range(0, len(buttons) - 1, 2)]

        if len(buttons) % 2 != 0:
            markupG.row(buttons[-1])
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üç¥.', reply_markup=markupG)

    elif call.data == "yes":
        answer = bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤(–Ω–µ –±–æ–ª–µ–µ 300 —Å–∏–º–≤–æ–ª–æ–≤):")
        bot.register_next_step_handler(answer, answers)

    elif call.data == 'no':
        bot.send_message(call.message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!\n–ë—É–¥–µ–º –∂–¥–∞—Ç—å –≤–∞—Å –µ—â–µ!')

    elif call.data == "order":
        price, count = 0, 0
        states_shop_basket = states[user_id]['shop_basket']

        for dish, details in states_shop_basket.items():
            name_dishes = dish
            price = price + int(details[1])
            counts = details[2]
            my_data_base.upd(name_dishes, counts)
        count += 1
        response = '\n'.join(
            [f'{item} [x{details[2]}] = {int(details[1]) * int(details[2])} BYN.' for item, details in
             states_shop_basket.items()])
        user_id = call.from_user.id
        states[user_id]['state'] = "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"
        states[user_id]['shop_basket'] = states_shop_basket
        print(states)
        global gl_resp
        gl_resp = response
        cur = max(int(info_dishes[i][1]) for i in states_shop_basket) if states_shop_basket else 0
        response += f'\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {cur + 10} –º–∏–Ω—É—Ç.'
        my_data_base.upd_user(user_id, states_shop_basket)
        user_name = call.from_user.username or call.from_user.first_name or call.from_user.last_name
        bot.send_message(chat_id="-4102272659", text=f" –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name}, –æ—Ñ–æ—Ä–º–∏–ª –∑–∞–∫–∞–∑ :{response} ")
        message = my_data_base.check_dishes()
        bot.send_message(chat_id="-4102272659", text=f" {message} ")
        bot.send_message(call.message.chat.id,
                         f"–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{count}\n____________________\n\n–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n{response}\n\n–ö–æ–Ω–µ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {price} BYN.")
        states_shop_basket.clear()
        bot.send_message(call.message.chat.id, "–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤?", reply_markup=markupANS)
        user_id = call.from_user.id
        states[user_id]['state'] = "–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω"
        states[user_id]['shop_basket'] = None
        print(states)

    elif call.data == 'stop':
        markupH = InlineKeyboardMarkup()
        for names in category.keys():
            markupH.add(InlineKeyboardButton(names, callback_data='s' + names))
        bot.send_message(-4102272659, '–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.', reply_markup=markupH)


    elif call.data[0] == 's':
        markupM = InlineKeyboardMarkup()
        for item in category[call.data[1:]]:
            markupM.add(InlineKeyboardButton(item, callback_data='p' + item))
        markupM.add(InlineKeyboardButton('–í –∫–∞—Ç–∞–ª–æ–≥', callback_data='stop'))
        bot.send_message(-4102272659, "–í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä.\n–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ 'stop'.",
                         reply_markup=markupM)

    elif call.data[0] == '*':
        markupG = InlineKeyboardMarkup().row(
            InlineKeyboardButton('-', callback_data='-' + call.data[1:]),
            InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data='d' + call.data[1:]),
            InlineKeyboardButton('+', callback_data='+' + call.data[1:])).row(
            InlineKeyboardButton('–í –º–µ–Ω—é', callback_data='3'))

        states_shop_basket = states[user_id]['shop_basket']
        dish_info_text = f'{call.data[1:]}.\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å = {int(states_shop_basket[call.data[1:]][1]) * int(states_shop_basket[call.data[1:]][2])} BYN.' + f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ = {states_shop_basket[call.data[1:]][2]}.'

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=dish_info_text,
                              reply_markup=markupG)

    for operation in ['-', '+', 'd']:
        if call.data.startswith(operation) and call.data[1:] in states_shop_basket:
            if operation in ['-', '+']:
                states_shop_basket[call.data[1:]][2] = str(int(states_shop_basket[call.data[1:]][2]) + (1 if operation == '+' else -1))
                total_cost = int(states_shop_basket[call.data[1:]][1]) * int(states_shop_basket[call.data[1:]][2])
                dish_info_text = f'{call.data[1:]}\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å = {total_cost} BYN.\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ = {states_shop_basket[call.data[1:]][2]}.'

                markupG = InlineKeyboardMarkup().row(
                    InlineKeyboardButton('-', callback_data='-' + call.data[1:]),
                    InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data='d' + call.data[1:]),
                    InlineKeyboardButton('+', callback_data='+' + call.data[1:])).row(
                    InlineKeyboardButton('–í –º–µ–Ω—é', callback_data='3'))

                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=dish_info_text, reply_markup=markupG)

            elif operation == 'd':

                del states_shop_basket[call.data[1:]]
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text='–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.', reply_markup=markup)
                user_id = call.from_user.id
                states[user_id]['state'] = "–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"
                states[user_id]['shop_basket'] = states_shop_basket
                print(states)




@bot.message_handler(func=lambda message: message.chat.id == -4102272659, commands=['stop_prod'])
def stop_product(message):
    user_id = message.from_user.id
    if user_id==config.SUPER_ADMIN_ID:
        markupN = InlineKeyboardMarkup()
        markupN.add(InlineKeyboardButton("–ö–∞—Ç–∞–ª–æ–≥", callback_data="stop"))
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç!\n–î–ª—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å—Ç–æ–ø –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=markupN)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã ")


def answers(message):
    ans = message.text
    user_id = message.from_user.id
    my_data_base.insert_into_disches_answer(gl_resp, user_id, ans)
    bot.send_message(message.chat.id, "C–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∂–º–∏—Ç–µ /menu")


@bot.message_handler(func=lambda message: message.chat.id == -4102272659, commands=['dish_add'])
def handle_command_in_group(message):
    markupN = InlineKeyboardMarkup()
    markupN.add(InlineKeyboardButton("Start to add", callback_data="start"))
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç!\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                     reply_markup=markupN)


def get_dish_photo(message):
    if message.photo:
        bot.send_message(-4102272659, f"ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {message.photo[-1].file_id}")
        values_to_insert = [info_new_dishes[1], info_new_dishes[3], info_new_dishes[4], info_new_dishes[0]]
        print(values_to_insert)
        my_data_base.insert_into_disches(info_new_dishes[1], info_new_dishes[2], info_new_dishes[3], info_new_dishes[4])

        column_index = 1
        column_values = worksheet.col_values(column_index)
        first_empty_row = next((i for i, value in enumerate(column_values, start=1) if not value), None)

        if first_empty_row is None:
            first_empty_row = len(column_values) + 1
        for i, value in enumerate(values_to_insert, start=1):
            worksheet.update_cell(first_empty_row, column_index + i - 1, value)
        dishes_id[info_new_dishes[1]] = message.photo[-1].file_id
        info_new_dishes.clear()


@bot.message_handler(func=lambda message: message.chat.id == -4102272659, commands=['dish_add'])
def handle_command_in_group(message):
    markupN = InlineKeyboardMarkup()
    markupN.add(InlineKeyboardButton("Start to add", callback_data="start"))
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç!\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                     reply_markup=markupN)


def enter_dish_adm(message):
    info_new_dishes.extend(message.text.split())
    bot.send_message(-4102272659,
                     f"–ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ.\n–ï–≥–æ –¥–∞–Ω–Ω—ã–µ:\n{info_new_dishes}\n\n –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –±–ª—é–¥–∞.")
    bot.register_next_step_handler(message, get_dish_photo)


@bot.message_handler(content_types=['text'],
                     func=lambda message: message.forward_from is not None and message.chat.id == admin_chat_id)
def handle_forwarded_messages(message):
    user_id = message.forward_from.id
    my_data_base.add_new_admin(user_id, "admin")
    bot.send_message(chat_id="-4102272659", text=f" –ê–¥–º–∏–Ω —Å id{user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")


@bot.message_handler(func=lambda message: message.chat.id == admin_chat_id, commands=['addAdmin'])
def handle_command_in_group(message):
    admin_id = message.from_user.id
    if admin_id==config.SUPER_ADMIN_ID:
        bot.send_message(message.chat.id, "–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —é–∑–µ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã ")


@bot.message_handler(func=lambda message: message.chat.id == admin_chat_id, commands=['delAdmin'])
def delete_admins(message):
     id_admins = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ id –∞–¥–º–∏–Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
     bot.register_next_step_handler(id_admins,delete)


def delete(message):
    admin_id = message.text
    my_data_base.delete(admin_id)
    bot.send_message(chat_id=-4102272659,text="–ê–¥–º–∏–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω ")

@bot.message_handler(commands=['info'])
def info(message):
    bot.send_message(message.chat.id, f"{config.INFO_MESSAGE}")


def send_message(cur, call):
    time.sleep(cur)
    bot.send_message(call.chat.id, "–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤. –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–π–º–µ—Ç 10 –º–∏–Ω—É—Ç ")


def show_dishes_menu(category_key, user_id, message_id):
    markup = InlineKeyboardMarkup()
    buttons = [InlineKeyboardButton(item, callback_data='2' + item) for item in category[category_key]]

    [markup.row(buttons[i], buttons[i + 1]) for i in range(0, len(buttons) - 1, 2)]

    if len(buttons) % 2 != 0: markup.row(buttons[-1])
    markup.add(InlineKeyboardButton('–í –º–µ–Ω—é', callback_data='3'))
    bot.edit_message_text(chat_id=user_id, message_id=message_id, text='–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ.', reply_markup=markup)


def show_dish_info(dish_key, chat_id):
    found_category = next((category_ for category_, dishes in category.items() if dish_key in dishes), None)

    if dish_key in info_dishes:
        dish_info_text = f"*{dish_key}*\n\n"
        dish_info_text += '\n'.join(
            [f'{list_of_list[0][n]}: {j} –º–∏–Ω—É—Ç' if list_of_list[0][n] == '–í—Ä–µ–º—è' else
             f'{list_of_list[0][n]}: {j} BYN' if list_of_list[0][n] == '–°—É–º–º–∞' else
             f'{list_of_list[0][n]}: {j}' for n, j in enumerate(info_dishes[dish_key][1:], start=1)])

        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='f' + found_category))
        markup.add(InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data='0' + dish_key))

        if dish_key not in list(dishes_id.keys()):
            with open('/Users/mac/Downloads/–ù–æ–≤–∞—è –ø–∞–ø–∫–∞ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏/'  + dish_key + '.jpg', 'rb') as photo:
                m = bot.send_photo(chat_id, photo=photo, caption=dish_info_text, reply_markup=markup,
                                   parse_mode='MarkdownV2')
                dishes_id[dish_key] = m.photo[-1].file_id
        else:
            bot.send_photo(chat_id, photo=dishes_id[dish_key], caption=dish_info_text,
                           reply_markup=markup)




@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id

    if user_id not in states:
        states.setdefault(user_id, {'state': None, 'shop_basket': None})

    if my_data_base.is_user_exest(user_id):
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç!")
        states[user_id]['state'] = "–Ω–∞—á–∞–ª–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
        states[user_id]['shop_basket'] = None
        print(states)
        handle_start(message)
    else:
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º. –í–≤–µ–¥–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ.")
        name = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è: ")
        bot.register_next_step_handler(name, names)


def names(message):
    global user_names
    user_names = message.text
    tel = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π  —Ç–µ–ª–µ—Ñ–æ–Ω: ")
    bot.register_next_step_handler(tel, telephon)


def telephon(message):
    global tele
    tele = message.text
    ad = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π  –∞–¥—Ä–µ—Å:")
    bot.register_next_step_handler(ad, adr)


def adr(message):
    global adres
    adres = message.text
    user_id = message.from_user.id
    my_data_base.insert_user_data(user_id, user_names, tele, adres)
    bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã ")



@bot.message_handler(func=lambda message: message.chat.id == admin_chat_id, commands=['show_users'])
def bd(message):
        con = sl.connect("vk_tg1.db")
        user = con.execute("SELECT * FROM Users")
        for d in user.fetchall():
            bot.send_message(message.chat.id, "_________________________")
            bot.send_message(message.chat.id, f"ID:{d[1]}")
            bot.send_message(message.chat.id, f"–ò–º—è:{d[2]}")
            bot.send_message(message.chat.id, f"–ù–æ–º–µ—Ä:{d[3]}")


@bot.message_handler(commands=['menu'])
def handle_start(message):
    user_id = message.from_user.id
    if my_data_base.is_user_exest(user_id):
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥–∞ ‚¨áÔ∏è", reply_markup=markupI)
        states[user_id]['state'] = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –º–µ–Ω—é"
        states[user_id]['shop_basket'] = states[user_id].get('shop_basket', {})
        print(states)
    else:

        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ù–∞–∂–º–∏—Ç–µ /start –∏ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
@bot.message_handler(commands=['shop_bag'])
def shopping_bag(message):
    user_id = message.from_user.id
    if my_data_base.is_user_exest(user_id):
        user_shop_basket = states[user_id].get('shop_basket', {})  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_shop_basket –≤–º–µ—Å—Ç–æ shop_bag
        if not user_shop_basket:
            states[user_id]['state'] = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–æ—Ä–∑–∏–Ω–µ"
            states[user_id]['shop_basket'] = None
            response = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
            bot.send_message(message.chat.id, response, reply_markup=markup)
        else:
            response = '\n'.join(
                [f'{item} [x{details[2]}] = {int(details[1]) * int(details[2])} BYN' for item, details in
                 user_shop_basket.items()])
            states[user_id]['state'] = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–æ—Ä–∑–∏–Ω–µ"
            states[user_id]['shop_basket'] = user_shop_basket
            markupShop_Bag = InlineKeyboardMarkup().row(
                InlineKeyboardButton('–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data='clear'),
                InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data='change')).row(
                InlineKeyboardButton('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='order'))

            bot.send_message(message.chat.id, response, reply_markup=markupShop_Bag)
    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ù–∞–∂–º–∏—Ç–µ /start –∏ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")


@bot.message_handler(commands=['show_all_admins'])
def show_all_admins(message):
    user_id = message.from_user.id
    if my_data_base.is_admin_exest(user_id):
        con = sl.connect("vk_tg1.db")
        user = con.execute("SELECT * FROM ADMIN")

        for d in user.fetchall():
            user_id = d[1]
            try:
                user_info = bot.get_chat_member(message.chat.id, user_id)
                username = user_info.user.username
                status = d[2]
                bot.send_message(message.chat.id, f"Username: @{username}, –°—Ç–∞—Ç—É—Å: {status}")
            except:
                bot.send_message(message.chat.id, f"ID –∞–¥–º–∏–Ω–∞ : {user_id}")
    else:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ , —É –≤–∞—Å –Ω–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ")


@bot.message_handler(commands=["show_my_order"])
def show_orders(message):
    user_id = message.from_user.id
    if my_data_base.is_user_exest(user_id):
        result = my_data_base.get_order(user_id)
        bot.send_message(message.chat.id, f"_____________________\n–í–∞—à –∑–∞–∫–∞–∑: {result}\n_____________________")
    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ù–∞–∂–º–∏—Ç–µ /start –∏ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")


@bot.message_handler(commands=["help"])
def help(message):
    user_id = message.from_user.id
    if my_data_base.is_user_exest(user_id):
        user_name = message.from_user.username or message.from_user.first_name or message.from_user.last_name
        bot.send_message(chat_id="-4102272659", text=f" @{user_name} –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ")
    else:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–ù–∞–∂–º–∏—Ç–µ /start –∏ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")


print("Running")
bot.polling(none_stop=True)
